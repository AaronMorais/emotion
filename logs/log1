import os
from PIL import Image
import numpy as np
import tensorflow as tf
from random import seed
from random import shuffle
from math import exp

def label_from_name(name):
  emotion = name[3:5]
  emotion = name[3:5]
  # if emotion == 'AN':
  #       return np.array([1,0,0,0,0,0,0])
  # elif emotion == 'DI':
  #       return np.array([0,1,0,0,0,0,0])
  # elif emotion == 'FE':
  #       return np.array([0,0,1,0,0,0,0])
  # elif emotion == 'HA':
  #       return np.array([0,0,0,1,0,0,0])
  # elif emotion == 'NE':
  #       return np.array([0,0,0,0,1,0,0])
  # elif emotion == 'SA':
  #       return np.array([0,0,0,0,0,1,0])
  # elif emotion == 'SU':
  #       return np.array([0,0,0,0,0,0,1])
  if emotion == 'HA':
    return np.array([0,1])
  elif emotion == 'SA':
    return np.array([1,0])
  else:
    raise AssertionError("Unable to determine emotion from name \"%s\"." % name)

import tensorflow as tf
sess = tf.Session()
sess = tf.Session()
filenames = []
labels = []
images = []
seed(9002)
for root, dirs, files in os.walk('jaffetest', topdown=False):
	shuffle(files)
	for name in files:
		if name[3:5] != "HA" and name[3:5] != "SA":
			continue
		labels += [label_from_name(name)]
		images += [tf.image.decode_png(tf.read_file(os.path.join(root, name)), channels=1).eval(session=sess)]

# images *= 6
# labels *= 6

# batch = [[images[i], labels[i]] for i in range(len(labels))]
# shuffle(batch)
# images = [row[0] for row in batch]
# labels = [row[1] for row in batch]
images = np.array(images)
# Convert from [0, 255] -> [0.0, 1.0].
images = images.astype(np.float32)
# def sigmoid_func(a, mid):
# 	return 1 / (1 + exp(-(a - mid)))

# sigmoid = np.vectorize(sigmoid_func)
# images = sigmoid(images, 128)
images = np.multiply(images, 1.0 / 255.0)
labels = np.array(labels, dtype='float32')
assert images.shape[3] == 1
images = images.reshape(images.shape[0], images.shape[1] * images.shape[2])
x = tf.placeholder(tf.float32, shape=[None, 65536]) #256*256
number_of_labels = 2
y_ = tf.placeholder(tf.float32, shape=[None, number_of_labels])

def weight_variable(shape):
	initial = tf.truncated_normal(shape, stddev=0.1)
	return tf.Variable(initial)

def bias_variable(shape):
	initial = tf.truncated_normal(shape, stddev=0.1)
	return tf.Variable(initial)

def conv2d(x, W):
	return tf.nn.conv2d(x, W, strides=[1, 1, 1, 1], padding='SAME')

def max_pool_2x2(x):
	return tf.nn.max_pool(x, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')

W_conv1 = weight_variable([5, 5, 1, 32])
b_conv1 = bias_variable([32])

x_image = tf.reshape(x, [-1,256,256,1])

h_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)
h_pool1 = max_pool_2x2(h_conv1)

W_conv2 = weight_variable([5, 5, 32, 64])
b_conv2 = bias_variable([64])

h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)
h_pool2 = max_pool_2x2(h_conv2)

W_conv3 = weight_variable([5, 5, 64, 128])
b_conv3 = bias_variable([128])

h_conv3 = tf.sigmoid(conv2d(h_pool2, W_conv3) + b_conv3)
h_pool3 = max_pool_2x2(h_conv3)

W_conv4 = weight_variable([5, 5, 128, 256])
b_conv4 = bias_variable([256])

h_conv4 = tf.sigmoid(conv2d(h_pool3, W_conv4) + b_conv4)
h_pool4 = max_pool_2x2(h_conv4)

W_fc1 = weight_variable([16 * 16 * 256, 1024])
b_fc1 = bias_variable([1024])

h_pool4_flat = tf.reshape(h_pool4, [-1, 16 * 16 * 256])
h_fc1 = tf.sigmoid(tf.matmul(h_pool4_flat, W_fc1) + b_fc1)

keep_prob = tf.placeholder(tf.float32)
h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)

W_fc2 = weight_variable([1024, number_of_labels])
b_fc2 = bias_variable([number_of_labels])

y_conv=tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)

cross_entropy = -tf.reduce_sum(y_*tf.log(y_conv+ 1e-9))
train_step = tf.train.AdamOptimizer(1e-5).minimize(cross_entropy)
correct_prediction = tf.equal(tf.argmax(y_conv,1), tf.argmax(y_,1))
accuracy = tf.reduce_sum(tf.cast(correct_prediction, tf.float32))
sess.run(tf.initialize_all_variables())
training = [images[:-10], labels[:-10]]
testing = [images[-10:], labels[-10:]]
for k in range(0, 10000, 1):
	i =  (k * 5) % (len(training[0]) - 5)
	if (i == 0):
		shuffled = [[training[0][l], training[1][l]] for l in range(len(training[0]))]
		shuffle(shuffled)
		training = [[row[0] for row in shuffled], [row[1] for row in shuffled]]
	if k%251 == 0:
		train_accuracy = 0
		for j in range(len(training[0])):
			train_accuracy += accuracy.eval(session=sess, feed_dict={x: training[0][j:j+1], y_: training[1][j:j+1], keep_prob: 1.0})
		print("step %d %d, training accuracy %g"%(k, i, train_accuracy / float(images.shape[0] - 10)))
		u = tf.matmul(h_fc1_drop, W_fc2) + b_fc2
		print y_conv.eval(session=sess, feed_dict={x: training[0][i:i+1], keep_prob: 1.0})
		print labels[i]
	if k%502 == 0:
		test_accuracy = 0
		for j in range(len(testing[0])):
			test_accuracy += accuracy.eval(session=sess, feed_dict={x: testing[0][j:j+1], y_: testing[1][j:j+1], keep_prob: 1.0})
		print("step %d: test accuracy %g"%(k, test_accuracy / len(testing[0])))
	train_step.run(session=sess, feed_dict={x: training[0][i:i+5], y_: training[1][i:i+5], keep_prob: 0.50})

test_accuracy = 0
for i in range(len(testing[0])):
	print y_conv.eval(session=sess, feed_dict={x: testing[0][i:i+1], keep_prob: 1.0})
	print testing[1][i:i+1]
	test_accuracy += accuracy.eval(session=sess, feed_dict={x: testing[0][i:i+1], y_: testing[1][i:i+1], keep_prob: 1.0})

print("test accuracy %g"%(test_accuracy/len(testing[0])))

step 0 0, training accuracy 0.5
[[ 0.10895152  0.89104843]]
[ 0.  1.]
step 0: test accuracy 0.5
step 251 33, training accuracy 0.653846
[[ 0.49850631  0.50149369]]
[ 1.  0.]
step 502 19, training accuracy 0.615385
[[ 0.71679574  0.28320429]]
[ 1.  0.]
step 502: test accuracy 0.5
step 753 5, training accuracy 0.576923
[[ 0.68823946  0.31176057]]
[ 1.  0.]
step 1004 38, training accuracy 0.865385
[[ 0.31327519  0.68672478]]
[ 0.  1.]
step 1004: test accuracy 0.6
step 1255 24, training accuracy 0.519231
[[ 0.78564829  0.21435173]]
[ 1.  0.]
step 1506 10, training accuracy 0.923077
[[ 0.72818869  0.27181131]]
[ 1.  0.]
step 1506: test accuracy 0.7
step 1757 43, training accuracy 0.788462
[[ 0.58296561  0.41703445]]
[ 0.  1.]
step 2008 29, training accuracy 0.961538
[[ 0.76820999  0.23179001]]
[ 0.  1.]
step 2008: test accuracy 0.8
step 2259 15, training accuracy 0.942308
[[ 0.82565838  0.17434166]]
[ 0.  1.]
step 2510 1, training accuracy 0.961538
[[ 0.82810438  0.17189559]]
[ 1.  0.]
step 2510: test accuracy 0.8
step 2761 34, training accuracy 0.884615
[[ 0.43108004  0.56891996]]
[ 0.  1.]
step 3012 20, training accuracy 0.961538
[[ 0.90617973  0.09382033]]
[ 0.  1.]
step 3012: test accuracy 0.9
step 3263 6, training accuracy 0.980769
[[ 0.07094607  0.9290539 ]]
[ 1.  0.]
step 3514 39, training accuracy 0.942308
[[ 0.71120286  0.28879714]]
[ 0.  1.]
step 3514: test accuracy 0.8
step 3765 25, training accuracy 0.980769
[[ 0.9473958   0.05260419]]
[ 1.  0.]
step 4016 11, training accuracy 0.980769
[[ 0.82877994  0.17122009]]
[ 0.  1.]
step 4016: test accuracy 0.9
step 4267 44, training accuracy 1
[[ 0.01451544  0.98548454]]
[ 1.  0.]
step 4518 30, training accuracy 1
[[ 0.14033137  0.85966867]]
[ 0.  1.]
step 4518: test accuracy 1
step 4769 16, training accuracy 0.980769
[[ 0.00317379  0.99682629]]
[ 0.  1.]
step 5020 2, training accuracy 0.980769
[[ 0.98339361  0.01660638]]
[ 0.  1.]
step 5020: test accuracy 1
step 5271 35, training accuracy 1
[[ 0.13860048  0.86139947]]
[ 1.  0.]
step 5522 21, training accuracy 0.980769
[[ 0.48081395  0.51918602]]
[ 1.  0.]
step 5522: test accuracy 1
step 5773 7, training accuracy 0.980769
[[ 0.9515481   0.04845194]]
[ 0.  1.]
step 6024 40, training accuracy 0.980769
[[ 0.98456234  0.01543764]]
[ 1.  0.]
step 6024: test accuracy 1
step 6275 26, training accuracy 1
[[ 0.00454187  0.99545813]]
[ 0.  1.]
step 6526 12, training accuracy 1
[[ 0.99795002  0.00205004]]
[ 1.  0.]
step 6526: test accuracy 1
step 6777 45, training accuracy 1
[[ 0.66859257  0.33140743]]
[ 0.  1.]
step 7028 31, training accuracy 1
[[ 0.01261479  0.98738527]]
[ 0.  1.]
step 7028: test accuracy 1
step 7279 17, training accuracy 0.980769
[[ 0.98280531  0.0171947 ]]
[ 1.  0.]
step 7530 3, training accuracy 1
[[ 0.00202177  0.99797827]]
[ 1.  0.]
step 7530: test accuracy 1
